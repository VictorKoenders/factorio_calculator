{"version":3,"sources":["data.ts","component/Recipe.tsx","storage.ts","component/RecipeEditor.tsx","component/Schematic.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RecipeWithCount","recipe","count","this","Schematic","goal","recipes","additional_inputs","additional_outputs","push","goalRecipe","goal_output","outputs","find","o","item","machine_count","calculateMachineCount","crafting_multiplier","machine","speed","craft_time","inputs","input","amount","filter","output","has_updated","update_count","r","recalculateRecipeAmount","balanceInputAndOutput","console","error","some","name","removeInput","index","findIndex","i","splice","removeOutput","crafting_time","stackOrAddTo","list","newAmount","available_output","otherOutput","Recipe","props","state","amountOfMachines","key","toFixed","input_output_count","length","Card","Header","style","float","Table","striped","bordered","hover","size","Array","fill","map","_","n","renderInputOutput","Footer","Button","variant","disabled","canMoveUp","onClick","onMoveUp","canMoveDown","onMoveDown","onDelete","React","Component","storage","machines","localStorage","getItem","JSON","parse","log","setItem","stringify","result","sort","cloneRecipe","additionalInputOutput","RecipeEditor","getDerivedStateFromProps","value","setState","machineName","m","newCraftTime","time","parseFloat","isNaN","isNullOrUndefined","toString","hasRecipe","emptyRecipe","Modal","show","onHide","onCancel","animation","closeButton","Title","Body","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","onChange","e","updateName","target","updateMachine","updateCraftTime","onBlur","commitCraftTime","renderItemList","deleteRecipe","onSave","callback","newText","itemTextChanged","itemAmountChanged","save","nextProps","oldState","schematic","SchematicData","calculate","editRecipe","available_recipes","suggested_recipes","recipe_output","schematic_input","other_recipes","every","r2","Container","fluid","type","setGoalAmount","setGoalItem","allItems","removeRecipe","swapRecipes","newRecipe","renderRecipeList","render_item_list","renderMachineList","saveRecipe","resetEditRecipe","title","renderRecipe","firstIndex","secondIndex","tmp","click","preventDefault","add","items","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.32a633f4.chunk.js","sourcesContent":["export interface Recipe {\n    name: string;\n    machine: Machine;\n    inputs: ItemAmount[];\n    outputs: ItemAmount[];\n    craft_time: number;\n}\n\nexport class RecipeWithCount {\n    recipe: Recipe;\n    count: number;\n\n    constructor(recipe: Recipe) {\n        this.recipe = recipe;\n        this.count = 1;\n    }\n}\n\nexport interface Machine {\n    name: string;\n    speed: number;\n}\n\nexport interface ItemAmount {\n    item: string;\n    amount: number;\n}\n\nexport class Schematic {\n    recipes: RecipeWithCount[] = [];\n    goal: ItemAmount;\n    additional_inputs: ItemAmount[] = [];\n    additional_outputs: ItemAmount[] = [];\n\n    constructor(goal: ItemAmount) {\n        this.goal = goal;\n    }\n\n    add(recipe: Recipe) {\n        this.recipes.push(new RecipeWithCount(recipe));\n    }\n\n    calculate() {\n        this.additional_inputs = [];\n        this.additional_outputs = [];\n        let goalRecipe: Recipe | null = null;\n        for (const recipe of this.recipes) {\n            let goal_output = recipe.recipe.outputs.find(o => o.item === this.goal.item);\n            if (goal_output) {\n                let machine_count = calculateMachineCount(recipe.recipe, goal_output, this.goal);\n                recipe.count = machine_count;\n                goalRecipe = recipe.recipe;\n\n                let crafting_multiplier = (recipe.recipe.machine.speed / recipe.recipe.craft_time) * machine_count;\n                for (const input of recipe.recipe.inputs) {\n                    this.additional_inputs.push({ amount: input.amount * crafting_multiplier, item: input.item });\n                }\n                for (const output of recipe.recipe.outputs.filter(o => o.item !== this.goal.item)) {\n                    this.additional_outputs.push({ amount: output.amount * crafting_multiplier, item: output.item });\n                }\n            } else {\n                recipe.count = 0;\n            }\n        }\n\n        let has_updated = true;\n        let update_count = 0;\n\n        while (has_updated && update_count < 1000) {\n            update_count++;\n            has_updated = false;\n            for (const recipe of this.recipes.filter(r => r.recipe !== goalRecipe)) {\n                has_updated = recalculateRecipeAmount(this.additional_inputs, this.additional_outputs, recipe) || has_updated;\n            }\n            this.balanceInputAndOutput();\n        }\n\n        if (update_count === 100) {\n            console.error(\"Could not finish calculating the schematic, update_count reached \" + update_count);\n        }\n\n    }\n\n    hasRecipe(recipe: Recipe) {\n        return this.recipes.some(r => r.recipe.name === recipe.name);\n    }\n\n    balanceInputAndOutput() {\n\n        for (const input of this.additional_inputs) {\n            for (const output of this.additional_outputs) {\n                if (input.item !== output.item) {\n                    continue;\n                }\n                let removeInput = (input: ItemAmount) => {\n                    let index = this.additional_inputs.findIndex(i => i.item === input.item);\n                    this.additional_inputs.splice(index, 1);\n                };\n                let removeOutput = (output: ItemAmount) => {\n                    let index = this.additional_outputs.findIndex(i => i.item === output.item);\n                    this.additional_outputs.splice(index, 1);\n                };\n                if (input.amount === output.amount) {\n                    removeInput(input);\n                    removeOutput(output);\n                } else if (input.amount > output.amount) {\n                    input.amount -= output.amount;\n                    removeOutput(output);\n                } else if (output.amount > input.amount) {\n                    output.amount -= input.amount;\n                    removeInput(input);\n                }\n            }\n        }\n    }\n}\n\nfunction calculateMachineCount(recipe: Recipe, output: ItemAmount, goal: ItemAmount) {\n    let crafting_time = recipe.craft_time / recipe.machine.speed;\n    let craft_count_required = goal.amount / output.amount;\n    let machine_count = craft_count_required * crafting_time;\n    return machine_count;\n}\n\nfunction stackOrAddTo(list: ItemAmount[], newAmount: ItemAmount) {\n    for (const item of list) {\n        if (item.item === newAmount.item) {\n            item.amount += newAmount.amount;\n            return;\n        }\n    }\n    list.push(newAmount);\n}\n\nfunction recalculateRecipeAmount(inputs: ItemAmount[], outputs: ItemAmount[], recipe: RecipeWithCount) {\n    for (const goal of inputs) {\n        const available_output = recipe.recipe.outputs.find(o => o.item === goal.item);\n        if (available_output == null) continue;\n\n        var machine_count = calculateMachineCount(recipe.recipe, available_output, goal);\n        recipe.count += machine_count;\n\n        var index = inputs.findIndex(o => o.item === goal.item);\n        inputs.splice(index, 1);\n\n        let crafting_multiplier = (recipe.recipe.machine.speed / recipe.recipe.craft_time) * machine_count;\n\n        for (const otherOutput of recipe.recipe.outputs.filter(o => o.item !== goal.item)) {\n            stackOrAddTo(outputs, { item: otherOutput.item, amount: otherOutput.amount * crafting_multiplier });\n        }\n        for (const input of recipe.recipe.inputs) {\n            stackOrAddTo(inputs, { item: input.item, amount: input.amount * crafting_multiplier });\n        }\n\n        return true;\n    }\n    return false;\n}","import React from 'react';\nimport { Recipe as RecipeData } from '../data';\nimport Table from 'react-bootstrap/Table';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { FaTimes } from 'react-icons/fa';\nimport { TiArrowSortedUp, TiArrowSortedDown } from 'react-icons/ti';\n\nexport interface Props {\n    recipe: RecipeData,\n    amountOfMachines: number,\n    canMoveUp: boolean,\n    canMoveDown: boolean,\n    onDelete: () => void,\n    onMoveUp: () => void,\n    onMoveDown: () => void,\n}\nexport interface State { }\n\nexport default class Recipe extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    renderInputOutput(index: number) {\n        let recipe = this.props.recipe;\n        let machine = recipe.machine;\n        let machine_count = this.props.amountOfMachines;\n\n        let input = recipe.inputs[index];\n        let output = recipe.outputs[index];\n        let crafting_multiplier = (machine.speed / recipe.craft_time) * machine_count;\n        return <tr key={index}>\n            <td>{input ? input.item : \"\"}</td>\n            <td>{input ? (input.amount * crafting_multiplier).toFixed(2) : \"\"}</td>\n            <td>{output ? output.item : \"\"}</td>\n            <td>{output ? (output.amount * crafting_multiplier).toFixed(2) : \"\"}</td>\n        </tr>\n    }\n\n    render() {\n        let recipe = this.props.recipe;\n        let input_output_count = recipe.inputs.length > recipe.outputs.length ? recipe.inputs.length : recipe.outputs.length;\n        return <Card>\n            <Card.Header>\n                <h3>{recipe.name}</h3>\n                <span style={{ float: 'right' }}>\n                    <b>{this.props.amountOfMachines.toFixed(1)}x</b>\n                    {' '}\n                    {recipe.machine.name}\n                </span>\n            </Card.Header>\n            <Table striped bordered hover size=\"sm\">\n                <thead>\n                    <tr>\n                        <th>Input</th>\n                        <th />\n                        <th>Output</th>\n                        <th />\n                    </tr>\n                </thead>\n                <tbody>\n                    {Array(input_output_count).fill(0).map((_, n) => this.renderInputOutput(n))}\n                </tbody>\n            </Table>\n            <Card.Footer>\n                <Button variant=\"outline-secondary\" disabled={!this.props.canMoveUp} onClick={this.props.onMoveUp}>\n                    <TiArrowSortedUp />\n                </Button>\n                {' '}\n                <Button variant=\"outline-secondary\" disabled={!this.props.canMoveDown} onClick={this.props.onMoveDown}>\n                    <TiArrowSortedDown />\n                </Button>\n                <Button variant=\"danger\" style={{ float: 'right' }} onClick={this.props.onDelete}>\n                    <FaTimes />\n                </Button>\n            </Card.Footer>\n        </Card>\n    }\n}","import { Machine, Recipe } from \"./data\";\n\nclass Storage {\n    recipes: Recipe[];\n\n    machines: Machine[] = [\n        { name: \"Strand casting machine 4\", speed: 3 },\n        { name: \"Blast furnace 4\", speed: 3 },\n        { name: \"Induction furnace 4\", speed: 3 },\n        { name: \"Pellet press 4\", speed: 3 },\n        { name: \"Ore processing machine\", speed: 3 },\n        { name: \"Ore sorting facility\", speed: 2 },\n        { name: \"Ore refinery\", speed: 1.5 },\n        { name: \"Leaching plant\", speed: 1.5 },\n        { name: \"Crafting machine\", speed: 2.75 },\n        { name: \"Filtration unit\", speed: 2.25 },\n        { name: \"Crystallizer\", speed: 2.25 },\n        { name: \"Hydro plant\", speed: 2 },\n        { name: \"Electrolyser\", speed: 2.5 },\n        { name: \"Ore crusher\", speed: 3 },\n        { name: \"Washing plant\", speed: 2.25 },\n        { name: \"Liquifier\", speed: 3.75 },\n        { name: \"Algae farm\", speed: 1.5 },\n        { name: \"Custom\", speed: 1 },\n    ];\n\n    constructor() {\n        this.recipes = [];\n        try {\n            let recipes = localStorage.getItem(\"recipes\");\n            if (recipes != null) {\n                this.recipes = JSON.parse(recipes);\n                console.log(\"Loaded \" + this.recipes.length + \" recipes\");\n            }\n        } catch {\n        }\n    }\n\n    save() {\n        localStorage.setItem(\"recipes\", JSON.stringify(this.recipes));\n    }\n\n    allItems() {\n        let result: string[] = [];\n        for (const recipe of this.recipes) {\n            for (const output of recipe.outputs) {\n                if (result.some(r => r === output.item)) continue;\n                result.push(output.item);\n            }\n        }\n\n        result.sort();\n        return result;\n    }\n}\n\nexport var storage = new Storage();\n","import React from 'react';\nimport { Recipe, ItemAmount } from '../data';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { storage } from '../storage';\nimport { FaTrashAlt } from 'react-icons/fa';\nimport { isNullOrUndefined } from 'util';\n\nexport interface Props {\n    recipe: Recipe | null;\n    onCancel: () => void;\n    onSave: (recipe: Recipe) => void;\n}\nexport interface State {\n    recipe: Recipe | null,\n    craft_time: string,\n}\n\nfunction cloneRecipe(recipe: Recipe, additionalInputOutput: boolean = false): Recipe {\n    let result: Recipe = {\n        name: recipe.name,\n        craft_time: recipe.craft_time,\n        machine: {\n            name: recipe.machine.name,\n            speed: recipe.machine.speed,\n        },\n        inputs: [],\n        outputs: [],\n    };\n\n    for (const input of recipe.inputs) {\n        result.inputs.push({\n            item: input.item,\n            amount: input.amount,\n        });\n    }\n    if (additionalInputOutput) {\n        result.inputs.push({ item: '', amount: 0 });\n    }\n    for (const output of recipe.outputs) {\n        result.outputs.push({\n            item: output.item,\n            amount: output.amount,\n        });\n    }\n    if (additionalInputOutput) {\n        result.outputs.push({ item: '', amount: 0 });\n    }\n\n    return result;\n}\nexport default class RecipeEditor extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = RecipeEditor.getDerivedStateFromProps(props, { recipe: null, craft_time: \"\" });\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, oldState: State) {\n        if (nextProps.recipe !== null && oldState.recipe === null) {\n            return {\n                recipe: cloneRecipe(nextProps.recipe, true),\n                craft_time: nextProps.recipe.craft_time.toString()\n            };\n        } else if (nextProps.recipe === null) {\n            return {\n                recipe: null,\n                craft_time: '0',\n            };\n        } else {\n            return oldState;\n        }\n    }\n\n    updateName(value: string) {\n        if (this.state.recipe === null) return;\n        let recipe: Recipe = cloneRecipe(this.state.recipe);\n        recipe.name = value;\n        this.setState({\n            recipe\n        })\n    }\n\n    updateMachine(machineName: string) {\n        let machine = storage.machines.find(m => m.name === machineName);\n        if (this.state.recipe === null || machine === null) return;\n        let recipe: Recipe = cloneRecipe(this.state.recipe);\n        recipe.machine = machine!;\n        this.setState({\n            recipe\n        })\n    }\n\n    updateCraftTime(newCraftTime: string) {\n        this.setState({\n            craft_time: newCraftTime\n        });\n    }\n\n    commitCraftTime() {\n        try {\n            let time = parseFloat(this.state.craft_time);\n            if (!isNaN(time) && !isNullOrUndefined(time)) {\n                if (this.state.recipe === null) return;\n                let recipe: Recipe = cloneRecipe(this.state.recipe);\n                recipe.craft_time = time;\n                this.setState({\n                    craft_time: time.toString(),\n                    recipe\n                });\n                return;\n            }\n        } catch { }\n        let craft_time = this.state.recipe ? this.state.recipe.craft_time.toString() : '0';\n        this.setState({\n            craft_time\n        });\n    }\n\n    render() {\n        let handleSave = () => {\n            let recipe = this.state.recipe;\n            if (recipe !== null) {\n                recipe.inputs = recipe.inputs.filter(i => i.item !== \"\" && i.amount > 0);\n                recipe.outputs = recipe.outputs.filter(i => i.item !== \"\" && i.amount > 0);\n                this.props.onSave(recipe);\n            }\n        };\n        let hasRecipe = this.state.recipe !== null;\n        let recipe: Recipe = this.state.recipe || emptyRecipe;\n        return <Modal show={hasRecipe} onHide={this.props.onCancel} animation={false}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit recipe</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group as={Row} controlId=\"recipe_name\">\n                        <Form.Label column sm=\"2\">Name</Form.Label>\n                        <Col sm=\"10\">\n                            <Form.Control value={recipe.name} onChange={e => this.updateName(e.target.value)} />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} controlId=\"machine\">\n                        <Form.Label column sm=\"2\">Machine</Form.Label>\n                        <Col sm=\"10\">\n                            <Form.Control as=\"select\" value={recipe.machine.name} onChange={e => this.updateMachine(e.target.value)}>\n                                {storage.machines.map(machine => <option key={machine.name}>{machine.name}</option>)}\n                            </Form.Control>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} controlId=\"craft_time\">\n                        <Form.Label column sm=\"2\">Craft time</Form.Label>\n                        <Col sm=\"10\">\n                            <Form.Control\n                                value={this.state.craft_time}\n                                onChange={e => this.updateCraftTime(e.target.value)}\n                                onBlur={() => this.commitCraftTime()}\n                            />\n                        </Col>\n                    </Form.Group>\n                    <b>Inputs</b>\n                    {this.renderItemList(recipe.inputs, (recipe, inputs) => recipe.inputs = inputs)}\n                    <b>Outputs</b>\n                    {this.renderItemList(recipe.outputs, (recipe, outputs) => recipe.outputs = outputs)}\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"danger\" onClick={() => this.deleteRecipe()}><FaTrashAlt /></Button>\n                <Button variant=\"danger\" onClick={this.props.onCancel}>Cancel</Button>\n                <Button variant=\"primary\" onClick={handleSave}>Save</Button>\n            </Modal.Footer>\n        </Modal>\n    }\n\n    renderItemList(list: ItemAmount[], callback: (recipe: Recipe, newItemList: ItemAmount[]) => void) {\n        let itemTextChanged = (item: ItemAmount, index: number, newText: string) => {\n            list[index].item = newText;\n            if (index === list.length - 1) {\n                list.push({\n                    item: '',\n                    amount: 0\n                });\n            }\n            let recipe = cloneRecipe(this.state.recipe!);\n            callback(recipe, list);\n            this.setState({ recipe });\n        };\n        let itemAmountChanged = (item: ItemAmount, index: number, newAmount: string) => {\n            list[index].amount = parseFloat(newAmount) || list[index].amount;\n            if (index === list.length - 1) {\n                list.push({\n                    item: '',\n                    amount: 0\n                });\n            }\n            let recipe = cloneRecipe(this.state.recipe!);\n            callback(recipe, list);\n            this.setState({ recipe });\n        };\n\n        return list.map((item, index) => <Form.Group as={Row} key={index}>\n            <Col sm=\"10\">\n                <Form.Control value={item.item} onChange={e => itemTextChanged(item, index, e.target.value)} />\n            </Col>\n            <Col sm=\"2\">\n                <Form.Control value={item.amount} onChange={e => itemAmountChanged(item, index, e.target.value)} />\n            </Col>\n        </Form.Group>);\n    }\n\n    deleteRecipe() {\n        if (this.state.recipe === null) return;\n        let recipe = this.state.recipe!;\n        let index = storage.recipes.findIndex(r => r.name === recipe.name);\n        if (index !== -1) {\n            storage.recipes.splice(index, 1);\n            storage.save();\n            this.props.onCancel();\n        }\n    }\n}\n\nexport var emptyRecipe: Recipe = {\n    name: '',\n    machine: storage.machines[0],\n    inputs: [],\n    outputs: [],\n    craft_time: 1,\n};\n","import React from 'react';\nimport { Schematic as SchematicData, ItemAmount, Recipe as RecipeData } from '../data';\nimport Recipe from './Recipe';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\nimport { FaRegArrowAltCircleLeft, FaPencilAlt, FaPlus } from 'react-icons/fa';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { storage } from '../storage';\nimport RecipeEditor, { emptyRecipe } from './RecipeEditor';\n\nexport interface Props {\n}\n\nexport interface State {\n    schematic: SchematicData,\n    editRecipe: RecipeData | null,\n}\n\nexport default class Schematic extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        let schematic = new SchematicData({\n            item: \"Iron sheet coil\",\n            amount: 45\n        });\n\n        schematic.calculate();\n\n        this.state = {\n            schematic,\n            editRecipe: null,\n        };\n    }\n\n    setGoalItem(item: string) {\n        let schematic = this.state.schematic;\n        schematic.goal.item = item;\n        schematic.calculate();\n        this.setState({\n            schematic\n        })\n    }\n\n    setGoalAmount(amount: string) {\n        let schematic = this.state.schematic;\n\n        schematic.goal.amount = parseFloat(amount) || schematic.goal.amount;\n        schematic.calculate();\n        this.setState({\n            schematic\n        })\n    }\n\n    render() {\n        let schematic = this.state.schematic;\n        let available_recipes = storage.recipes.filter(r => !schematic.hasRecipe(r));\n        let suggested_recipes = available_recipes.filter(recipe => {\n            for (const recipe_output of recipe.outputs) {\n                if (recipe_output.item === schematic.goal.item) {\n                    return true;\n                }\n                for (const schematic_input of schematic.additional_inputs) {\n                    if (recipe_output.item === schematic_input.item) {\n                        return true;\n                    }\n                }\n            }\n            return false\n        });\n        let other_recipes = available_recipes.filter(r => suggested_recipes.every(r2 => r2.name !== r.name));\n        return <>\n            <Container fluid>\n\n                <Row>\n                    <Col>\n                        <b>Goal: </b>\n                        {' '}\n                        <input type=\"text\" value={this.state.schematic.goal.amount} size={3} onChange={e => this.setGoalAmount(e.target.value)} />\n                        {' '}\n                        <select value={this.state.schematic.goal.item} onChange={e => this.setGoalItem(e.target.value)}>\n                            {storage.allItems().map(item => <option>{item}</option>)}\n                        </select>\n                        {\n                            schematic.recipes.map((recipe, index) => <Recipe\n                                key={index}\n                                recipe={recipe.recipe}\n                                amountOfMachines={recipe.count}\n                                canMoveUp={index > 0}\n                                canMoveDown={index < schematic.recipes.length - 1}\n                                onDelete={() => this.removeRecipe(recipe.recipe)}\n                                onMoveUp={() => this.swapRecipes(index - 1, index)}\n                                onMoveDown={() => this.swapRecipes(index, index + 1)}\n                            />)\n                        }\n                    </Col>\n                    <Col>\n                        <Row>\n                            <Col>\n                                <h2>Recipes</h2>\n                            </Col>\n                            <Button variant=\"outline-primary\" onClick={() => this.newRecipe()}><FaPlus /></Button>\n                        </Row>\n                        {this.renderRecipeList(\"Suggested\", suggested_recipes)}\n                        {this.renderRecipeList(\"Other\", other_recipes)}\n                    </Col>\n                    <Col>\n                        <Card>\n                            <Card.Header>Additional inputs</Card.Header>\n                            {render_item_list(schematic.additional_inputs)}\n                        </Card>\n                        <Card>\n                            <Card.Header>Additional outputs</Card.Header>\n                            {render_item_list(schematic.additional_outputs)}\n                        </Card>\n                        <Card>\n                            <Card.Header>Machines required</Card.Header>\n                            {this.renderMachineList()}\n                        </Card>\n\n                    </Col>\n                </Row>\n            </Container>\n            <RecipeEditor recipe={this.state.editRecipe} onSave={r => this.saveRecipe(r)} onCancel={() => this.resetEditRecipe()} />\n        </>\n    }\n\n    renderRecipeList(title: string, recipes: RecipeData[]) {\n        if (recipes.length === 0) return <></>;\n        return <>\n            <b>{title}</b>\n            {recipes.map((recipe, index) => this.renderRecipe(recipe, index))}\n        </>\n    }\n\n    renderMachineList() {\n        return <Table size=\"sm\">\n            <thead>\n                <tr>\n                    <th>Recipe</th>\n                    <th>Machine</th>\n                    <th>Amount</th>\n                </tr>\n            </thead>\n            <tbody>\n                {this.state.schematic.recipes.map((recipe, index) => <tr key={index}>\n                    <td>{recipe.recipe.name}</td>\n                    <td>{recipe.recipe.machine.name}</td>\n                    <td>{recipe.count.toFixed(1)}</td>\n                </tr>)}\n            </tbody>\n        </Table>;\n    }\n\n    newRecipe() {\n        this.setState({\n            editRecipe: emptyRecipe\n        });\n    }\n\n    resetEditRecipe() {\n        this.state.schematic.calculate();\n        this.setState({\n            editRecipe: null\n        });\n    }\n\n    saveRecipe(recipe: RecipeData) {\n        let index = storage.recipes.findIndex(r => r.name === recipe.name);\n        if (index !== -1) {\n            storage.recipes[index] = recipe;\n        } else {\n            storage.recipes.push(recipe);\n        }\n        storage.save();\n        this.resetEditRecipe();\n    }\n\n    swapRecipes(firstIndex: number, secondIndex: number) {\n        let schematic = this.state.schematic;\n        if (firstIndex >= 0 && secondIndex >= 0 && firstIndex < schematic.recipes.length && secondIndex < schematic.recipes.length) {\n            let tmp = schematic.recipes[firstIndex];\n            schematic.recipes[firstIndex] = schematic.recipes[secondIndex];\n            schematic.recipes[secondIndex] = tmp;\n            this.setState({\n                schematic\n            });\n        }\n    }\n\n    removeRecipe(recipe: RecipeData) {\n        let schematic = this.state.schematic;\n        let index = schematic.recipes.findIndex(r => r.recipe.name === recipe.name);\n        if (index !== -1) {\n            schematic.recipes.splice(index, 1);\n            schematic.calculate();\n            this.setState({\n                schematic\n            });\n        }\n    }\n\n    renderRecipe(recipe: RecipeData, index: number) {\n        let handleAddClick = (click: React.MouseEvent) => {\n            click.preventDefault();\n            let schematic = this.state.schematic;\n            schematic.add(recipe);\n            schematic.calculate();\n            this.setState({\n                schematic\n            });\n        };\n        let handleEditClick = () => {\n            this.setState({\n                editRecipe: recipe,\n            });\n        };\n        return <Row key={index}>\n            <Button variant=\"outline-primary\" as={Col} onClick={handleAddClick}>\n                <FaRegArrowAltCircleLeft /> {recipe.name}\n            </Button>\n            <Button variant=\"outline-secondary\" onClick={handleEditClick}>\n                <FaPencilAlt />\n            </Button>\n        </Row>;\n    }\n}\n\nfunction render_item_list(items: ItemAmount[]) {\n    return <Table size=\"sm\">\n        <thead>\n            <tr>\n                <th>Item</th>\n                <th>Amount</th>\n            </tr>\n        </thead>\n        <tbody>\n            {items.map((item, index) => <tr key={index}><td>{item.item}</td><td>{item.amount.toFixed(2)}</td></tr>)}\n        </tbody>\n    </Table>;\n}","import React from 'react';\nimport './App.css';\nimport Schematic from './component/Schematic';\n\nfunction App() {\n  return (\n    <Schematic />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}